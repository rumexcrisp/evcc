network:
  # schema is the HTTP schema
  # setting to `https` does not enable https, it only changes the way URLs are generated
  schema: http
  # host is the hostname or IP address
  # if the host name contains a `.local` suffix, the name will be announced on MDNS
  # docker: MDNS announcements don't work. host must be set to the docker host's name.
  # host: evcc.local
  # port is the listening port for UI and api
  # evcc will listen on all available interfaces
  port: 7070

interval: 10s # control cycle interval

# sponsor token enables optional features (request at https://cloud.evcc.io)
# sponsortoken:

# telemetry enables aggregated statistics
#
# Telemetry allows collecting usage data (grid and green energy, charge power).
# Data is aggregated, no individual charging sessions are tracked. The collected,
# anonymous data can be retrieved using https://api.evcc.io.
#
# See https://github.com/evcc-io/evcc/pull/4343 or details.
#
# For time being, this is only available to sponsors, hence data is associated with
# the sponsor token's identity.
#
telemetry: false

# log settings
log: info
levels:
  site: debug
  lp-1: debug
  lp-2: debug

# meter definitions
# name can be freely chosen and is used as reference when assigning meters to site and loadpoints
# for documentation see https://docs.evcc.io/docs/devices/meters
meters:
  - name: gridMeter
    type: custom
    power: # power (W)
      source: mqtt
      topic: tele/tasmota_9C5C90/SENSOR
      jq: .MT681.Power_cur
      timeout: 30s # don't accept values older than timeout
      scale: 1 # floating point factor applied to result, e.g. for Wh to kWh conversion
    energy: # optional energy (kWh)
      source: mqtt
      topic: tele/tasmota_9C5C90/SENSOR
      jq: .MT681.Total_in
      timeout: 30s # don't accept values older than timeout
      scale: 1 # floating point factor applied to result, e.g. for Wh to kWh conversion
    # soc: # optional battery soc (%)
    #   source: # plugin type
    #   # ...
    # currents: # optional currents (A)
    #   - source: mqtt # L1 plugin type
    #     topic: tele/tasmota_9C5C90/SENSOR
    #     jq: $.MT681.$.MT681.$.MT681.Power_p1
    #     timeout: 30s # don't accept values older than timeout
    #     scale: 1
    #   - source: mqtt # L2 plugin type
    #     topic: tele/tasmota_9C5C90/SENSOR
    #     jq: $.MT681.$.MT681.$.MT681.Power_p2
    #     timeout: 30s # don't accept values older than timeout
    #     scale: 1
    #   - source: mqtt # L3 plugin type
    #     topic: tele/tasmota_9C5C90/SENSOR
    #     jq: $.MT681.$.MT681.$.MT681.Power_p3
    #     timeout: 30s # don't accept values older than timeout
    #     scale: 1

# charger definitions
# name can be freely chosen and is used as reference when assigning charger to vehicle
# for documentation see https://docs.evcc.io/docs/devices/chargers
chargers:
  - name: ABB
    type: template
    template: abb      
    
    # Modbus TCP
    modbus: tcpip
    id: 1
    host: 192.0.2.2 # Hostname
    port: 502 # Port 

# vehicle definitions
# name can be freely chosen and is used as reference when assigning vehicle to loadpoint
# for documentation see https://docs.evcc.io/docs/devices/vehicles
# vehicles:
#   - name: car1
#     type: renault
#     title: Zoe
#     capacity: 60 # kWh
#     user: myuser # user
#     password: mypassword # password
#     vin: WREN...
#     onIdentify: # set defaults when vehicle is identified
#       mode: pv # enable PV-charging when vehicle is identified
#       minSoC: 20 # immediately charge to 0% regardless of mode unless "off" (disabled)
#       targetSoC: 90 # limit charge to 90%

# site describes the EVU connection, PV and home battery
site:
  title: Home # display name for UI
  meters:
    grid: gridMeter # grid meter
    # pvs:
    #   - pv # list of pv inverters/ meters
    # battery: battery # battery meter
  prioritySoC: # give home battery priority up to this soc (empty to disable)
  bufferSoC: # ignore home battery discharge above soc (empty to disable)

# loadpoint describes the charger, charge meter and connected vehicle
loadpoints:
  - title: Garage # display name for UI
    charger: ABB # charger
    # meter: gridMeter # charge meter
    mode: "now" # set default charge mode, use "off" to disable by default if charger is publicly available
    # vehicle: car1 # set default vehicle (disables vehicle detection)
    resetOnDisconnect: true # set defaults when vehicle disconnects
    soc:
      # polling defines usage of the vehicle APIs
      # Modifying the default settings it NOT recommended. It MAY deplete your vehicle's battery
      # or lead to vehicle manufacturer banning you from API use. USE AT YOUR OWN RISK.
      poll:
        # poll mode defines under which condition the vehicle API is called:
        #   charging: update vehicle ONLY when charging (this is the recommended default)
        #   connected: update vehicle when connected (not only charging), interval defines how often
        #   always: always update vehicle regardless of connection state, interval defines how often (only supported for single vehicle)
        mode: charging
        # poll interval defines how often the vehicle API may be polled if NOT charging
        interval: 60m
      estimate: true # set false to disable interpolating between api updates (not recommended)
    phases: 3 # electrical connection (normal charger: default 3 for 3 phase, 1p3p charger: 0 for "auto" or 1/3 for fixed phases)
    enable: # pv mode enable behavior
      delay: 1m # threshold must be exceeded for this long
      threshold: 0 # grid power threshold (in Watts, negative=export). If zero, export must exceed minimum charge power to enable
    disable: # pv mode disable behavior
      delay: 3m # threshold must be exceeded for this long
      threshold: 0 # maximum import power (W)
    guardDuration: 5m # switch charger contactor not more often than this (default 5m)
    minCurrent: 6 # minimum charge current (default 6A)
    maxCurrent: 16 # maximum charge current (default 16A)

# tariffs are the fixed or variable tariffs
# cheap (tibber/awattar) can be used to define a tariff rate considered cheap enough for charging
tariffs:
  currency: EUR # three letter ISO-4217 currency code (default EUR)
  grid:
    # either static grid price
    type: fixed
    price: 0.46 # EUR/kWh

    # # or variable via tibber
    # type: tibber
    # cheap: 0.2 # EUR/kWh
    # token: "476c477d8a039529478ebd690d35ddd80e3308ffc49b59c65b142321aee963a4" # access token
    # homeid: "cc83e83e-8cbf-4595-9bf7-c3cf192f7d9c" # optional if multiple homes associated to account

    # # or variable via awattar
    # type: awattar
    # cheap: 0.2 # EUR/kWh
    # region: de # optional, choose at for Austria
  feedin:
    # rate for feeding excess (pv) energy to the grid
    type: fixed
    price: 0.08 # EUR/kWh

# mqtt message broker
mqtt:
  broker: 192.168.10.33:1883
  topic: evcc # root topic for publishing, set empty to disable publishing
  clientid: evcc
  user: evcc
  password: AS!dfghJKL97@EVCC?

# influx database
influx:
  # url: http://localhost:8086
  # database: evcc
  # user:
  # password:

# eebus credentials
eebus:
  # uri: # :4712
  # interfaces: # limit eebus to specific network interfaces
  # - en0
  # certificate: # local signed certificate, required, can be generated via `evcc eebus-cert`
  #   public: # public key
  #   private: # private key

# push messages
messaging:
  events:
    start: # charge start event
      title: Charge started
      msg: Started charging in "${mode}" mode
    stop: # charge stop event
      title: Charge finished
      msg: Finished charging ${chargedEnergy:%.1fk}kWh in ${chargeDuration}.
    connect: # vehicle connect event
      title: Car connected
      msg: "Car connected at ${pvPower:%.1fk}kW PV"
    disconnect: # vehicle connected event
      title: Car disconnected
      msg: Car disconnected after ${connectedDuration}
    soc: # vehicle soc update event
      title: SoC updated
      msg: Battery charged to ${vehicleSoC:%.0f}%
    guest: # vehicle could not be identified
      title: Unknown vehicle
      msg: Unknown vehicle, guest connected?
  services:
  # - type: pushover
  #   app: # app id
  #   recipients:
  #   - # list of recipient ids
  # - type: telegram
  #   token: # bot id
  #   chats:
  #   - # list of chat ids
  # - type: email
  #   uri: smtp://<user>:<password>@<host>:<port>/?fromAddress=<from>&toAddresses=<to>
